1.Implement Queue using Stacks

class MyQueue {
    public Stack<Integer> main = new Stack<>();
    public Stack<Integer> helper = new Stack<>();

    public MyQueue() {
      

    }
    
    public void push(int x) {
         while(!main.isEmpty()){
           helper.push(main.pop());
       } 
       main.push(x);
       
        while(!helper.isEmpty()){
           main.push(helper.pop());
       } 
    }
    
    public int pop() {
        if(!main.isEmpty()){
        return main.pop();
        }
        return -1;
    }
    
    public int peek() {
         if(!main.isEmpty()){
        return main.peek();
        }
        return -1;
    }
    
    public boolean empty() {
        return main.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Design Circular Queue
class MyCircularQueue {
    private int[] q;
    private int headIdx, cnt, sz;
    public MyCircularQueue(int k) {
        q = new int[k];
        cnt=0;
        headIdx=0;
        sz=k;
    }
    
    public boolean enQueue(int value) {
        if(isFull()){
            return false;
        }

        q[(headIdx+cnt)%sz]=value;
        cnt++;
        return true;
    }
    
    public boolean deQueue() {
        if (isEmpty()) return false;
        headIdx = (headIdx + 1) % sz;
        cnt++;
        return true;
    }
    
    public int Front() {
        if (isEmpty()) return -1;
        return q[headIdx];
    }
    
    public int Rear() {
        if (isEmpty()) return -1;
        return q[(headIdx + cnt - 1) % sz];
    }
    
    public boolean isEmpty() {
        return cnt == 0;
    }
    
    public boolean isFull() {
        return cnt == sz;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Queue Reversal

//User function Template for Java
/*Complete the function below*/
class GfG{
    //Function to reverse the queue.
    public Queue<Integer> rev(Queue<Integer> q){
        Stack<Integer> s=new Stack<>();
        
        while(!q.isEmpty()){
            s.push(q.poll());
        }
        
        while(!s.empty()){
            q.add(s.pop());
        }
        return q;
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
